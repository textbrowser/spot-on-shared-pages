<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">



<head>

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-20JYM3ZFN0"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-20JYM3ZFN0');
</script>



	  
	  <title>System-class Accessibility - ACM Queue</title>

	  

	  <meta name='description' value='' />
	  <meta name='keywords' value='HCI' />

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-P52H78L');</script>
<!-- End Google Tag Manager -->

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="shortcut icon" href="favicon.ico" />

<script type="text/javascript" src="/js/jquery-1.2.6.min.js"></script>
<script type="text/javascript" src="/js/jquery.validate.min.js"></script>
<script type="text/javascript" src="/js/global.js"></script>



<!--
<link rel="alternate" type="application/rss+xml" title="Latest Queue Content RSS 2.0" href="/rss/feeds/latestitems.xml" />
-->
<link rel="alternate" type="application/rss+xml" title="All Queue Content RSS 2.0" href="/rss/feeds/queuecontent.xml" />
<link rel="alternate" type="application/rss+xml" title="Curmudgeon RSS 2.0"     href="/rss/feeds/curmudgeon.xml" />
<link rel="alternate" type="application/rss+xml" title="Opinion RSS 2.0"        href="/rss/feeds/opinion.xml" />
<link rel="alternate" type="application/rss+xml" title="Kode Vicious RSS 2.0"   href="/rss/feeds/kodevicious.xml" />
<link rel="alternate" type="application/rss+xml" title="ACM TechNews RSS"       href="https://www.infoinc.com/acm/TechNews.rss" />
<link rel="alternate" type="application/rss+xml" title="Washington Updates RSS" href="https://usacm.acm.org/weblog2/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="RISKS Forum RSS"        href="/rss/feeds/risksforum.xml" />


<link rel="alternate" type="application/rss+xml" title="AI RSS 2.0"        href="/rss/feeds/ai.xml" />

<link rel="alternate" type="application/rss+xml" title="API Design RSS 2.0"        href="/rss/feeds/apidesign.xml" />

<link rel="alternate" type="application/rss+xml" title="Bioscience RSS 2.0"        href="/rss/feeds/bioscience.xml" />

<link rel="alternate" type="application/rss+xml" title="Blockchain RSS 2.0"        href="/rss/feeds/blockchain.xml" />

<link rel="alternate" type="application/rss+xml" title="Business/Management RSS 2.0"        href="/rss/feeds/business/management.xml" />

<link rel="alternate" type="application/rss+xml" title="Compliance RSS 2.0"        href="/rss/feeds/compliance.xml" />

<link rel="alternate" type="application/rss+xml" title="Component Technologies RSS 2.0"        href="/rss/feeds/componenttechnologies.xml" />

<link rel="alternate" type="application/rss+xml" title="Computer Architecture RSS 2.0"        href="/rss/feeds/computerarchitecture.xml" />

<link rel="alternate" type="application/rss+xml" title="Concurrency RSS 2.0"        href="/rss/feeds/concurrency.xml" />

<link rel="alternate" type="application/rss+xml" title="Cryptocurrency RSS 2.0"        href="/rss/feeds/cryptocurrency.xml" />

<link rel="alternate" type="application/rss+xml" title="DSPs RSS 2.0"        href="/rss/feeds/dsps.xml" />

<link rel="alternate" type="application/rss+xml" title="Data RSS 2.0"        href="/rss/feeds/data.xml" />

<link rel="alternate" type="application/rss+xml" title="Databases RSS 2.0"        href="/rss/feeds/databases.xml" />

<link rel="alternate" type="application/rss+xml" title="Debugging RSS 2.0"        href="/rss/feeds/debugging.xml" />

<link rel="alternate" type="application/rss+xml" title="Development RSS 2.0"        href="/rss/feeds/development.xml" />

<link rel="alternate" type="application/rss+xml" title="Distributed Computing RSS 2.0"        href="/rss/feeds/distributedcomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="Distributed Development RSS 2.0"        href="/rss/feeds/distributeddevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Education RSS 2.0"        href="/rss/feeds/education.xml" />

<link rel="alternate" type="application/rss+xml" title="Email and IM RSS 2.0"        href="/rss/feeds/emailandim.xml" />

<link rel="alternate" type="application/rss+xml" title="Embedded Systems RSS 2.0"        href="/rss/feeds/embeddedsystems.xml" />

<link rel="alternate" type="application/rss+xml" title="Failure and Recovery RSS 2.0"        href="/rss/feeds/failureandrecovery.xml" />

<link rel="alternate" type="application/rss+xml" title="File Systems and Storage RSS 2.0"        href="/rss/feeds/filesystemsandstorage.xml" />

<link rel="alternate" type="application/rss+xml" title="Game Development RSS 2.0"        href="/rss/feeds/gamedevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Graphics RSS 2.0"        href="/rss/feeds/graphics.xml" />

<link rel="alternate" type="application/rss+xml" title="HCI RSS 2.0"        href="/rss/feeds/hci.xml" />

<link rel="alternate" type="application/rss+xml" title="Managing Megaservices RSS 2.0"        href="/rss/feeds/managingmegaservices.xml" />

<link rel="alternate" type="application/rss+xml" title="Mobile Computing RSS 2.0"        href="/rss/feeds/mobilecomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="Networks RSS 2.0"        href="/rss/feeds/networks.xml" />

<link rel="alternate" type="application/rss+xml" title="Object-Relational Mapping RSS 2.0"        href="/rss/feeds/object-relationalmapping.xml" />

<link rel="alternate" type="application/rss+xml" title="Open Source RSS 2.0"        href="/rss/feeds/opensource.xml" />

<link rel="alternate" type="application/rss+xml" title="Patching and Deployment RSS 2.0"        href="/rss/feeds/patchinganddeployment.xml" />

<link rel="alternate" type="application/rss+xml" title="Performance RSS 2.0"        href="/rss/feeds/performance.xml" />

<link rel="alternate" type="application/rss+xml" title="Power Management RSS 2.0"        href="/rss/feeds/powermanagement.xml" />

<link rel="alternate" type="application/rss+xml" title="Privacy and Rights RSS 2.0"        href="/rss/feeds/privacyandrights.xml" />

<link rel="alternate" type="application/rss+xml" title="Processors RSS 2.0"        href="/rss/feeds/processors.xml" />

<link rel="alternate" type="application/rss+xml" title="Programming Languages RSS 2.0"        href="/rss/feeds/programminglanguages.xml" />

<link rel="alternate" type="application/rss+xml" title="Purpose-built Systems RSS 2.0"        href="/rss/feeds/purpose-builtsystems.xml" />

<link rel="alternate" type="application/rss+xml" title="Quality Assurance RSS 2.0"        href="/rss/feeds/qualityassurance.xml" />

<link rel="alternate" type="application/rss+xml" title="RFID RSS 2.0"        href="/rss/feeds/rfid.xml" />

<link rel="alternate" type="application/rss+xml" title="SIP RSS 2.0"        href="/rss/feeds/sip.xml" />

<link rel="alternate" type="application/rss+xml" title="Search Engines RSS 2.0"        href="/rss/feeds/searchengines.xml" />

<link rel="alternate" type="application/rss+xml" title="Security RSS 2.0"        href="/rss/feeds/security.xml" />

<link rel="alternate" type="application/rss+xml" title="Semi-structured Data RSS 2.0"        href="/rss/feeds/semi-structureddata.xml" />

<link rel="alternate" type="application/rss+xml" title="Social Computing RSS 2.0"        href="/rss/feeds/socialcomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="System Administration RSS 2.0"        href="/rss/feeds/systemadministration.xml" />

<link rel="alternate" type="application/rss+xml" title="System Evolution RSS 2.0"        href="/rss/feeds/systemevolution.xml" />

<link rel="alternate" type="application/rss+xml" title="Testing RSS 2.0"        href="/rss/feeds/testing.xml" />

<link rel="alternate" type="application/rss+xml" title="Virtual Machines RSS 2.0"        href="/rss/feeds/virtualmachines.xml" />

<link rel="alternate" type="application/rss+xml" title="Virtualization RSS 2.0"        href="/rss/feeds/virtualization.xml" />

<link rel="alternate" type="application/rss+xml" title="Visualization RSS 2.0"        href="/rss/feeds/visualization.xml" />

<link rel="alternate" type="application/rss+xml" title="VoIP RSS 2.0"        href="/rss/feeds/voip.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Development RSS 2.0"        href="/rss/feeds/webdevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Security RSS 2.0"        href="/rss/feeds/websecurity.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Services RSS 2.0"        href="/rss/feeds/webservices.xml" />

<link rel="alternate" type="application/rss+xml" title="Workflow Systems RSS 2.0"        href="/rss/feeds/workflowsystems.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6562869-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

<script type="text/javascript">
function plusone_vote( obj ) {
_gaq.push(['_trackEvent','plusone',obj.state]);
}
</script>



<style>
body {
	font-family: jaf-bernino-sans, 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Geneva, Verdana, sans-serif;
	color: #333;
	max-width: 100%;
}
div.container p {
	line-height: 1.65em;
}
h1 {
	font-size: 32px;
}
h3 {
	font-size: 18px;
}
h4 {
	font-size: 14px;
}

div.container {
	margin-left: auto;
	margin-right: auto;
}

div {
	margin: 64px;
//	max-width: 800px;
	position: relative;
}

@media only screen and (min-width: 1024px) {
	div {
		max-width: 800px;
	}
}

img {
    max-width: 100%;
    height: auto;
    width: auto\9; /* ie8 */
}
a {
	color: #009;
	text-decoration: none;
}
a:hover {
	text-decoration: underline;
}
hr {
	margin:64px;
}
label {
	font-size: 0.8em;
	color: #666;
}
input {
	color: #999;
}

/* NAVBAR */
.navbar {
//	position: fixed;
	background: #EEEEEE;
	top: -64px;
	z-index: 10000;
	width: 100%;
	clear: both;
	padding: 0px;
	margin: 0px;
	padding-top: 10px;
	padding-left: 10px;
	padding-right: 10px;
}

/*  SECTIONS  */
.section {
	clear: both;
	padding: 0px;
	margin: 0px;
}

/*  COLUMN SETUP  */
.col {
	display: block;
	float:left;
	margin: 1% 0 1% 1.6%;
}
.col:first-child { margin-left: 0; }


/*  GROUPING  */
.group:before,
.group:after {
	content:"";
	display:table;
}
.group:after {
	clear:both;
}
.group {
    zoom:1; /* For IE 6/7 */
}

/*  GRID OF THREE  */
.span_3_of_3 {
	width: 100%;
}
.span_2_of_3 {
	width: 66.1%;
}
.span_1_of_3 {
	width: 32.2%;
}

/*  GO FULL WIDTH AT LESS THAN 480 PIXELS */

@media only screen and (max-width: 480px) {
	.col {
		margin: 1% 0 1% 0%;
	}
}

@media only screen and (max-width: 480px) {
	.span_3_of_3 {
		width: 100%;
	}
	.span_2_of_3 {
		width: 100%;
	}
	.span_1_of_3 {
		width: 100%;
	}
}

.span_2_of_2 {
	width: 100%;
}

.span_1_of_2 {
	width: 49.2%;
}

/*  GO FULL WIDTH AT LESS THAN 480 PIXELS */

@media only screen and (max-width: 480px) {
	.span_2_of_2 {
		width: 100%;
	}
	.span_1_of_2 {
		width: 100%;
	}
}
</style>


<style>
body {
	font-size: 19px;
}
#form-search > .st-default-search-input {
	width: 170px;
  display: inline-block;
  height: 16px;
  padding: 7px 11px 7px 28px;
  border: 1px solid #bbb;
  border: 1px solid rgba(0,0,0,0.25);
  font-weight: 400;
  color: #3B454F;
  font-size: 14px;
  line-height: 16px;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  font-family: system, -apple-system, BlinkMacSystemFont, "Helvetica Neue", "Lucida Grande", sans-serif;
}


blockquote
{
    color: #666;
    font-size: 1.1em;
    background: none;
    border-left: .2rem solid #d3d3d3;

    display: block;
    padding: 20px 20px 10px 45px;
    margin: 20px 0;
    font-style: italic;

    margin-block-start: 1em;
    margin-block-end: 1em;
    margin-inline-start: 40px;
    margin-inline-end: 40px;

	font-family: Georgia, Palatino, "Palatino Linotype", Times, "Times New Roman", serif;
}

.ldq {
	display: block;
    padding-left: 10px;
    content: "\201C";
    font-size: 60px;
    position: relative;
    left: -50px;
    top: 0;
    height: 0;
    color: #7a7a7a;
}
code {
//	font-size:1.25em;
}
a {overflow-wrap: break-word;}
</style>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<body>
<!-- Google Tag Manager (noscript)
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P52H78L"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
 End Google Tag Manager (noscript) -->



<div class=container>
	<div class="navbar">
		<form id="form-search" name="searchform" onsubmit="return false;" style='float:right;'>
				<input type="text" class="st-default-search-input">
<script type="text/javascript">
  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){
  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);
  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');

  _st('install','UyYECD1kdsPnbHJtPyzG','2.0.0');
</script>
				<br />
			
			<a href="issuedetail.cfm?issue=3705868" style='width:150px;font-size:0.7em;'>Current Issue</a> &nbsp; <a href="pastissues.cfm" style='width:150px;font-size:0.7em;'>Past Issues</a> &nbsp; <a href="topics.cfm" style='width:150px;font-size:0.7em;'>Topics</a>
			
		</form>
		<a href='/'><img src='https://queue.acm.org/img/acmqueue_logo.gif' /></a>

	</div>

<!--
<p style='text-align:center;'>
<a href='/app/' target='_new'><img src='/app/2021_03-04_lrg.png' with=90 height=120 style='float:right;width:90px;height:120px;' alt='March/April 2021 issue of acmqueue' /></a>
<b><a href='/app/'>The March/April 2021 issue of acmqueue is out now</a></b>
<br />
<br />
<a href='https://cdn.coverstand.com/3rd_pty/acm/login.html?&btx_i=705849'>Subscribers and ACM Professional members login here</a>
<br clear=all />
<hr style='display:block;color:red;margin:5px;' />
</p>
-->
<br />



<label>November 24, 2024<br /><b><a class="descriptor" href="issuedetail.cfm?issue=3705868">Volume 22, issue 5 </a></b></label>


<p>
<!-- // Check for existence of associated MP3 file-->

 &nbsp;
	
			<a href="https://portal.acm.org/citation.cfm?id=3704627">
				<img src="img/icon_pdf.png" alt="Download PDF version of this article" />
				PDF
			</a>
		
</p>


 
  <h1 class="hidetitle">System-class Accessibility</h1> 
  <h2>The architectural support for making a whole system usable by people with disabilities</h2> 
  <h3>Chris Fleizach and Jeffrey P. Bigham</h3> 
  <p>Modern operating systems need to support extensive accessibility features that allow computer systems to be flexibly operated by people with disabilities. Content on the screen must be read aloud to someone who cannot see it. Controls must be operated by external switches or speech commands if someone cannot touch them. Aural speech must be converted to textual captions for someone who cannot hear. Apple's iOS and iPadOS, for example, includes more than 50 accessibility features that change the inputs used to control user interfaces and the outputs used to perceive them for people with different abilities.</p> 
  <p>Enabling computing systems to be operated so flexibly requires deeply technical work across the platform. This work can be categorized as follows: </p> 
  <ul> 
   <li>Alternative modalities for providing input to the system and for receiving output from it.</li> 
   <li>APIs and supporting frameworks that allow applications to describe the current state of their user interface and to programmatically respond to user input.</li> 
   <li>Accessibility services that bridge the alternative input and output methods with applications.</li> 
  </ul> 
  <p>Together, we call these components <i>system-class accessibility</i>. This approach is architected at the operating-system level to support a wide range of different accessibility features across every application that can run on the system. This reduces the specialized work required to support each new accessibility feature, and ultimately means that the platform is more accessible to more people. </p> 
  <p>This article illustrates system-class accessibility with our work enabling iPhones to be used nonvisually using the VoiceOver screen reader. We reimagined touchscreen input for nonvisual use, introducing new gestures suitable for control of a screen reader, and for output we added support for synthesized speech and refreshable braille displays (hardware devices that output tactile braille characters). We added new accessibility APIs that applications could adopt and made our user interface frameworks include them by default. Finally, we added an accessibility service to bridge between these new inputs and outputs and the applications. Because we implemented support for VoiceOver at the system level, future accessibility features that we have released since have directly leveraged this work to provide a consistent user experience.</p> 
  <p>&nbsp;</p> 
  <h3>Alternative Input and Output Modalities </h3> 
  <p>The human interface to computing systems consists of inputs that a person provides to the system and outputs received from it. A key technical challenge in accessibility is building alternative ways to operate the system so that people can use different abilities for input and output. As an early adopter of new modalities, accessibility leads the way in expanding how computers can be used.</p> 
  <p>Many kinds of inputs and outputs have been used to operate computers, from early computing systems that used physical switches for input and lights for output, to modern desktop computers that use keyboards and mice for input and high-resolution graphical displays for output. New types of inputs and outputs are implemented using a combination of custom software and either existing hardware or new external hardware. External hardware devices generally communicate with existing computing systems using protocols like USB and Bluetooth, registering as human interface devices (HIDs), or by using specific device drivers. The refreshable braille display is a common hardware device for accessibility, which combines an alternative input (chorded braille input over six or eight keys) and a refreshable braille character output display (typically, 40 or 80 linear braille characters). Keyboards, like chords played on a piano, allow users to press multiple keys at the same time. For example, CTRL+C is a "chord" on a standard keyboard.</p> 
  <p>Adapting existing hardware to support alternative input and output mechanisms is often preferred because it allows people to use computers that are widely available. This work often happens when new computing devices are introduced. For example, when Apple introduced the iPhone, the multitouch screen initially required vision to use it because the touch input and visual output were so closely tied together—you needed to see where to touch to use the device effectively. To render the iPhone usable by people with vision disabilities, the solution was to decouple the touchscreen input from the visual content displayed on it. To do so, we introduced new interactive gestures that can be used without seeing the screen contents and used on-device speech synthesis, just like desktop screen readers, to output the content in a way that was perceivable to a person without vision.</p> 
  <p>To implement these new gestures, we first intercepted touch events and changed how they were interpreted. On iOS, touch events are generated through a firmware-level framework that turns sensor data into a stream of discrete touch, move, and lift events. We repurposed some of these events to support nonvisual use—for example, touch events were changed in software to cause content beneath the finger to be announced instead of actuated. A second touch, in succession, actuates the target. This design change allows people who are blind to explore the contents of the screen without risk of accidentally triggering targets.</p> 
  <p>Other gestures needed to be invented and implemented using multiple touch events. For example, we introduced the <i>rotor gesture,</i> in which a user "rotates" a virtual knob anywhere on the display to change screen reader settings (for example, the speech rate). When studying how people naturally perform the rotor gesture, we discovered differences across users. Some used their thumb and index finger; some used two thumbs close together, moving horizontally; others used two index fingers moving vertically. Thus, we built a flexible gesture interpreter to handle a variety of these cases by tracking directionality and velocity per finger over a 30-event window for the duration of a touch sequence. Triggering a rotor gesture thus required that each finger maintain the expected movement relative to one another over this period, but did not require a fixed distance between fingers or operation on a specific position of the screen.</p> 
  <p>Finally, in some cases we replaced gestures that would be difficult to perform nonvisually with a set of discrete custom accessibility actions. Dragging a target and then dropping it elsewhere on the interface requires high-dexterity movement coordinated with the screen's visual context, which is difficult to do nonvisually. Our API instead allows the appropriate function to be called in response to a sequence of discrete actions that are more easily performed nonvisually. Dragging a target can be replaced by first selecting the target, then indicating that the intended action is a drag, and then finally selecting the location where it should be dropped.</p> 
  <p>&nbsp;</p> 
  <h5>LISTING 1: Custom Action for Dropping a Target</h5> 
  <p><code> override var accessibilityCustomActions: <br />[AccessibilityCustomAction]? { <br /> &nbsp; get { <br /> &nbsp; &nbsp; return [ <br /> &nbsp; &nbsp; &nbsp; AccessibilityCustomAction(name: "Drop", actionHandler: {_ in performDrop() })] <br /> &nbsp; } <br />} </code></p> 
  <p>&nbsp;</p> 
  <p>This iOS VoiceOver example provides an initial solution for making a device accessible, but accessibility work must also keep pace with the rest of the system. As new interactions are added in subsequent releases, accessible alternatives need to be provided. For example, when iOS introduced cut/copy/paste, we needed to create an accessible way to perform this function as well. Thus, the work of accessibility needs to continue in concert with the development of the rest of the platform.</p> 
  <p>&nbsp;</p> 
  <h3>APIs for Connecting to Application User Interfaces</h3> 
  <p>To enable people to access applications using a variety of input and output methods, application content and interactions need to be made available programmatically. This means that applications should be able to convert their content into a computer-readable format (for example, text and metadata in a known data structure), and they should be operable using an API that is not tied directly to any particular way of providing input.</p> 
  <p>As an example, consider a command-line user interface. Input is a sequence of characters, which are generated either directly by the keyboard or provided by a computer program (for example, a shell script). Output is the sequence of characters that results from issuing a command. The accessibility API for the command-line application would thus accept a sequence of characters as input and return the sequence of characters that results. The API's abstraction means that the command-line application itself doesn't need to do anything special to support a wide range of inputs and outputs. </p> 
  <p>For input, people can use the keyboard directly, convert aural speech to text, use an on-screen keyboard driven by eye gaze, or apply any other method that can convert a user's input to a sequence of characters. For output, people can read the text on the screen, listen to the output using text-to-speech synthesis, read by touch using a connected braille display, or use any other method that is developed that can convert a sequence of characters into something that can be perceived.</p> 
  <p>Despite its simplicity, a command-line user interface also presents accessibility challenges when the output of the system is not fully represented using the API. Many command-line programs represent content visually by manipulating the character buffer to create the visual effect of, for example, a progress bar. This primarily visual representation can be difficult to understand when read aloud, and the user needs to know to go back to check the progress bar manually for updates. People are also ingenious in how they use limited modalities to achieve interesting interfaces—consider ASCII-art, the arrangement of lines of regular text characters to form the visual effect of an image.</p> 
  <p>Similar challenges arise in graphical user interfaces (GUIs) where clever developers use a variety of approaches to achieve the visual look of the interfaces they create but often do not make use of APIs available to make those interfaces accessible. Developing an accessible GUI requires the content, state, and structure of the visual interface to be made available with an API. </p> 
  <p>At the lowest level, this means exposing the content of each user interface element (for example, a button, a checkbox, or text field) with the API. A button implementation requires that the API convey both its label (such as "Login") and type ("button"). Sometimes, elements will also have associated state. A button might be disabled to indicate that it cannot currently be pressed, or a checkbox might be checked or unchecked. Finally, the API needs to capture visual structure. For example, labels need to be associated with the elements they label so that the screen reader can read them together.</p> 
  <p>An important component of system-class accessibility is thus providing the API necessary for user interface elements to make themselves accessible. In modern user interface toolkits (SwiftUI, HTML, etc.), using the standard elements generally means that developers get accessibility without additional work. The toolkit provides appropriate metadata for elements of known types. Buttons created in the standard way, for example, can provide their label and state. For a variety of reasons, developers may want to extend beyond the standard components and need the API to support making elements accessible when they do so.</p> 
  <p>Listing 2 makes a SwiftUI View into an element exposed by the accessibility API. In the original code (without the two bolded lines), the View protocol visually represents a "Pause" state using two vertical lines positioned next to each other. Adding the modifier <code>.accessibilityElement()</code> exposes that this is not just a visual grouping or effect, but an element that contains content. The <code>.accessibilityLabel("Pause")</code> modifier provides a description that conveys its content for users who are not able to see the vertical bars.</p> 
  <p>&nbsp;</p> 
  <h5>LISTING 2: a SwiftUI View representing a "Pause" state accessible</h5> 
  <p><code> var body: some View { <br /> &nbsp; HStack(alignment: .center, spacing: 0.4) { <br /> &nbsp; &nbsp; Image("VerticalLine") <br /> &nbsp; &nbsp; Image("VerticalLine") <br /> &nbsp; } <br /> &nbsp; <b>.accessibilityElement()</b> <br /> &nbsp; <b>.accessibilityLabel("Pause")</b> <br />} </code></p> 
  <p>&nbsp;</p> 
  <p>As Listing 2 shows, modern UI toolkits often allow user-interface components to be made accessible with minimal code. Nevertheless, accessibility gaps often still exist. Because developers aren't typically the primary users of accessibility features, it can be challenging for them to test their implementations. To help with testing and debugging, most platforms provide accessibility-testing tools. Unfortunately, these tools cannot find all problems automatically, for the same reasons they cannot just fix all the problems automatically, and so developers need to put in some effort to understand these APIs, how they work, and what it means to use them correctly.</p> 
  <p>To address the situations where developers have not implemented the accessibility APIs properly, VoiceOver users can access computer vision on demand with a feature called Screen Recognition to interpret the pixels of the GUI. This feature enables applications coded in third-party user-interface toolkits that don't expose accessibility information to be usable.<sup>1</sup> Because each interface element has an identifiable set of pixels, the feature can label each element that VoiceOver can then use. While computer vision is a promising tool, skilled developers are needed for now to make applications fully accessible.</p> 
  <p>&nbsp;</p> 
  <h3>Accessibility Services </h3> 
  <p>The final step to achieve system-class accessibility is to create a usable software bridge between new inputs and outputs (VoiceOver in our example) and accessibility APIs for each running application. VoiceOver needs to communicate with each application's implementation of the Accessibility APIs so that it has access to the content currently displayed onscreen, can control each application programmatically, and receives notifications from each application of important events that would impact VoiceOver's reflection of each application's state. This communication layer is the most important function of the accessibility service.</p> 
  <p>Expanding on our example: Converting a GUI into information that can be used with a screen reader requires connecting user inputs to appropriate user interface elements displayed on the screen. For iOS, VoiceOver interprets a tap on the screen as a user request to speak the interface element under the user's finger. To accomplish this, VoiceOver sends the touch coordinates to the target application, asking for the accessibility element at those coordinates. The accessibility service routes the request to the appropriate application and returns the answer to VoiceOver. The result is an accessibility object that can be further queried for more specific information such as the element's label, value, or traits.</p> 
  <p>In iOS, a low-level framework provides the accessibility service's interprocess communication (IPC) mechanism for querying apps about items. Specifically, a Mach server connects the accessibility service and each application by allowing messages and shared memory to pass between processes. (<i>Mach</i> is the name for IPC primitives on Darwin-based platforms, which is the Unix foundation underlying Apple platforms.) Each application registers itself as a reachable server, so the accessibility service needs to know only the process identifier (pid) of an application to message it. A messaging system allows each query to reference an element, including the attribute being queried and any parameters. On the application side, when a query is received, the element reference is decoded to point to a real object that can answer the query, assuming it correctly implements the accessibility API.</p> 
  <p>Performance is a primary consideration in accessibility services because the user can easily feel any latency in the interaction. To feel responsive, audio output should begin less than 0.4 seconds from the time a user's finger touches the screen. The sequence of events from the user's touch to the beginning of synthesized speech is the following: (1) receiving and interpreting the touch event; (2) issuing a query to the system for the current application; (3) querying the application for the element at the position of the touch; (4) querying the element for its label; and (5) finally generating and outputting the synthesized speech for the label. As a result, performance requirements are deeply connected to interaction constraints.</p> 
  <p>Beyond the IPC layer, another important role of the accessibility-services layer is to provide all other APIs and services that are helpful for enabling assistive technologies—speech recognition, speech synthesis, and accommodations that adjust behavior of the whole system, such as zoom, dynamic type, color filters, and touch.</p> 
  <p>Accessibility services are often reused for automating user interfaces, which has become increasingly popular as part of automated testing and when building agents that can complete tasks on user interfaces. Thus, automated testing and automation agents often have similar dependencies on correct accessibility implementation.</p> 
  <p>&nbsp;</p> 
  <h3>Conclusion</h3> 
  <p>This article has introduced <i>system-class accessibility</i>, which is what we call the architectural support for making a whole system usable by people with disabilities. Significant technical effort goes into achieving this—dozens of assistive technologies, hundreds of settings, and numerous customizations across applications. These are the basic table stakes for what users need and expect today. This development effort ranges from low-level message passing, to hardware connectivity, to user interfaces that provide the means of controlling the underlying system. When done correctly, it provides life-changing access to technology for many people who would be left out of computing otherwise.</p> 
  <p>&nbsp;</p> 
  <h4>References</h4> 
  <p>1. Zhang, X., et al. 2021. Screen Recognition: Creating Accessibility Metadata for Mobile Applications from Pixels. Machine Learning Research; <a href="https://machinelearning.apple.com/research/creating-accessibility-metadata">https://machinelearning.apple.com/research/creating-accessibility-metadata</a>.</p> 
  <p>&nbsp;</p> 
  <p><b>Chris Fleizach</b> is the Mobile Accessibility Manager at Apple and has helped ensure iPhone, iPad, Apple Watch, Apple TV, Apple Vision Pro, and more are accessible to all users. He has helped create VoiceOver, AssistiveTouch, Switch Control, made for iPhone (MFi) Hearing Aid support, Assistive Access, and more with many people and teams across Apple. </p> 
  <p><b>Jeffrey P. Bigham</b> is the Director of Human-Centered Machine Learning at Apple and an Associate Professor in the Human-Computer Interaction and Language Technologies Institutes in the School of Computer Science at Carnegie Mellon University. His research and product work have brought machine learning to bear on hard problems in accessibility.</p> 
  <p>Copyright © 2024 held by owner/author. Publication rights licensed to ACM.</p> 
  <p>&nbsp;</p>  
 <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8fa41930884e7ff1',t:'MTczNTU4MzM5OC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script> 

	<p>
	
		<img class="floatLeft" src="img/q stamp_small.jpg" width="26" height="45" alt="acmqueue"><br><br>
	
	<em>Originally published in Queue vol. 22, no. 5</em>&#8212;
 	<br>
	Comment on this article in the <a href="http://portal.acm.org/citation.cfm?id=3704627">ACM Digital Library</a>
	
	</p>
	



<br />
<!--
<a href="https://twitter.com/share" class="twitter-share-button" data-via="ACMQueue">Tweet</a>
-->
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>

<br />

<!--
<fb:like></fb:like>
-->

<br />

<div class="g-plusone" data-size="small" data-annotation="inline" data-width="120"></div>

<!-- these get hooked up to js events -->
<script type="text/javascript">
	addthis_pub             = 'acm';
	addthis_logo            = 'http://queue.acm.org/img/logo_queue_small.gif';
	addthis_logo_background = '#ffffff';
	addthis_logo_color      = '000000';
	addthis_brand           = 'ACM Queue';
	addthis_options         = 'reddit, slashdot, facebook, favorites, email, delicious, digg, technorati, blinklist, furl, myspace, google, live, more';
</script>

<!-- FB Like -->
<!--
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div id="fb-root"></div>
-->

<!-- Place this tag after the last +1 button tag. -->

<!--
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>

<br />
<script src="https://connect.facebook.net/en_US/all.js#xfbml=1"></script>

<script>
FB.Event.subscribe('edge.create', function(targetUrl) {
  _gaq.push(['_trackSocial', 'facebook', 'like', targetUrl]);
});
</script>
-->



<hr noshade size=1 />




More related articles:

	  <p>
	  <span>Vinnie Donati</span> - <a href="detail.cfm?id=3704638"><b>Driving Organizational Accessibility</b></a>
	  <br />
	  In this article we'll explore how Microsoft drives accessibility throughout its organization and we'll look closely at essential frameworks and practices that promote an inclusive culture. Through examining aspects like awareness building, strategic development, accessibility maturity modeling, and more, we aim to offer a guide for organizations starting their accessibility journey. The idea is to share what we've learned in the hope that you can take it, tweak it to fit your company's purpose, and nurture accessibility in a way that's not just a checkbox activity but genuinely integrated into your culture.
	  </p>
	  <br />

	  <p>
	  <span>Shahtab Wahid</span> - <a href="detail.cfm?id=3704443"><b>Design Systems Are Accessibility Delivery Vehicles</b></a>
	  <br />
	  Design systems are infrastructure built for consumers&#8212;the designers and developers&#8212;working on applications. A successful one allows consumers in an organization to quickly scale design and development across applications, increase productivity, and establish consistency. Many consumers, however, are not prepared to build for accessibility. Couldn't an organization make building accessibility support for applications scalable, productive, and consistent? This article explores how a design system becomes an important vehicle to supporting accessibility.
	  </p>
	  <br />

	  <p>
	  <span>Juanami Spencer</span> - <a href="detail.cfm?id=3704628"><b>Accessibility Considerations for Mobile Applications</b></a>
	  <br />
	  Considering accessibility is essential when creating mobile applications to ensure they are usable and enjoyable for as broad an audience as possible. Mobile accessibility has unique considerations compared with desktop experiences, but it provides immense value to those users who rely on mobile devices in their day-to-day activities. By keeping these considerations in mind, mobile product development teams can better support and enhance the lives of all users. This article explores some of the key accessibility considerations for a mobile application and highlights a few ways the Bloomberg Connects app supports accessibility in both the product and process.
	  </p>
	  <br />

	  <p>
	  <span>Stacy M. Branham, Shahtab Wahid, Sheri Byrne-Haber, Jamal Mazrui, Carlos Muncharaz, Carl Myhill</span> - <a href="detail.cfm?id=3704442"><b>The State of Digital Accessibility</b></a>
	  <br />
	  If you are new to digital accessibility, and even if you are not, it can be difficult to stay abreast of the big picture, and the tech industry moves fast. So, we asked a team of experts to bring us up to speed. Not only do they have day jobs that involve digital accessibility, but they also have lived experience of disability. We posed the following questions to them: What's the state of accessibility? Key challenges? Why do we need accessible software? How can we make the case for accessibility? Who's leading the way? Where do we go from here?
	  </p>
	  <br />


<hr noshade size=1 />





<hr noshade size=1 />

	<p>
	<a href='#'><img src='https://queue.acm.org/img/logo_acm.gif' /></a>
	<br />
	&copy; ACM, Inc. All Rights Reserved.
	</p>

</div>



</body>
</html>