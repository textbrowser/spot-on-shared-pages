<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">



<head>

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-20JYM3ZFN0"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-20JYM3ZFN0');
</script>



	  
	  <title>Questioning the Criteria for Evaluating Non-cryptographic Hash Functions - ACM Queue</title>

	  

	  <meta name='description' value='' />
	  <meta name='keywords' value='Development' />

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-P52H78L');</script>
<!-- End Google Tag Manager -->

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="shortcut icon" href="favicon.ico" />

<script type="text/javascript" src="/js/jquery-1.2.6.min.js"></script>
<script type="text/javascript" src="/js/jquery.validate.min.js"></script>
<script type="text/javascript" src="/js/global.js"></script>



<!--
<link rel="alternate" type="application/rss+xml" title="Latest Queue Content RSS 2.0" href="/rss/feeds/latestitems.xml" />
-->
<link rel="alternate" type="application/rss+xml" title="All Queue Content RSS 2.0" href="/rss/feeds/queuecontent.xml" />
<link rel="alternate" type="application/rss+xml" title="Curmudgeon RSS 2.0"     href="/rss/feeds/curmudgeon.xml" />
<link rel="alternate" type="application/rss+xml" title="Opinion RSS 2.0"        href="/rss/feeds/opinion.xml" />
<link rel="alternate" type="application/rss+xml" title="Kode Vicious RSS 2.0"   href="/rss/feeds/kodevicious.xml" />
<link rel="alternate" type="application/rss+xml" title="ACM TechNews RSS"       href="https://www.infoinc.com/acm/TechNews.rss" />
<link rel="alternate" type="application/rss+xml" title="Washington Updates RSS" href="https://usacm.acm.org/weblog2/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="RISKS Forum RSS"        href="/rss/feeds/risksforum.xml" />


<link rel="alternate" type="application/rss+xml" title="AI RSS 2.0"        href="/rss/feeds/ai.xml" />

<link rel="alternate" type="application/rss+xml" title="API Design RSS 2.0"        href="/rss/feeds/apidesign.xml" />

<link rel="alternate" type="application/rss+xml" title="Bioscience RSS 2.0"        href="/rss/feeds/bioscience.xml" />

<link rel="alternate" type="application/rss+xml" title="Blockchain RSS 2.0"        href="/rss/feeds/blockchain.xml" />

<link rel="alternate" type="application/rss+xml" title="Business/Management RSS 2.0"        href="/rss/feeds/business/management.xml" />

<link rel="alternate" type="application/rss+xml" title="Compliance RSS 2.0"        href="/rss/feeds/compliance.xml" />

<link rel="alternate" type="application/rss+xml" title="Component Technologies RSS 2.0"        href="/rss/feeds/componenttechnologies.xml" />

<link rel="alternate" type="application/rss+xml" title="Computer Architecture RSS 2.0"        href="/rss/feeds/computerarchitecture.xml" />

<link rel="alternate" type="application/rss+xml" title="Concurrency RSS 2.0"        href="/rss/feeds/concurrency.xml" />

<link rel="alternate" type="application/rss+xml" title="Cryptocurrency RSS 2.0"        href="/rss/feeds/cryptocurrency.xml" />

<link rel="alternate" type="application/rss+xml" title="DSPs RSS 2.0"        href="/rss/feeds/dsps.xml" />

<link rel="alternate" type="application/rss+xml" title="Data RSS 2.0"        href="/rss/feeds/data.xml" />

<link rel="alternate" type="application/rss+xml" title="Databases RSS 2.0"        href="/rss/feeds/databases.xml" />

<link rel="alternate" type="application/rss+xml" title="Debugging RSS 2.0"        href="/rss/feeds/debugging.xml" />

<link rel="alternate" type="application/rss+xml" title="Development RSS 2.0"        href="/rss/feeds/development.xml" />

<link rel="alternate" type="application/rss+xml" title="Distributed Computing RSS 2.0"        href="/rss/feeds/distributedcomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="Distributed Development RSS 2.0"        href="/rss/feeds/distributeddevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Education RSS 2.0"        href="/rss/feeds/education.xml" />

<link rel="alternate" type="application/rss+xml" title="Email and IM RSS 2.0"        href="/rss/feeds/emailandim.xml" />

<link rel="alternate" type="application/rss+xml" title="Embedded Systems RSS 2.0"        href="/rss/feeds/embeddedsystems.xml" />

<link rel="alternate" type="application/rss+xml" title="Failure and Recovery RSS 2.0"        href="/rss/feeds/failureandrecovery.xml" />

<link rel="alternate" type="application/rss+xml" title="File Systems and Storage RSS 2.0"        href="/rss/feeds/filesystemsandstorage.xml" />

<link rel="alternate" type="application/rss+xml" title="Game Development RSS 2.0"        href="/rss/feeds/gamedevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Graphics RSS 2.0"        href="/rss/feeds/graphics.xml" />

<link rel="alternate" type="application/rss+xml" title="HCI RSS 2.0"        href="/rss/feeds/hci.xml" />

<link rel="alternate" type="application/rss+xml" title="Managing Megaservices RSS 2.0"        href="/rss/feeds/managingmegaservices.xml" />

<link rel="alternate" type="application/rss+xml" title="Mobile Computing RSS 2.0"        href="/rss/feeds/mobilecomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="Networks RSS 2.0"        href="/rss/feeds/networks.xml" />

<link rel="alternate" type="application/rss+xml" title="Object-Relational Mapping RSS 2.0"        href="/rss/feeds/object-relationalmapping.xml" />

<link rel="alternate" type="application/rss+xml" title="Open Source RSS 2.0"        href="/rss/feeds/opensource.xml" />

<link rel="alternate" type="application/rss+xml" title="Patching and Deployment RSS 2.0"        href="/rss/feeds/patchinganddeployment.xml" />

<link rel="alternate" type="application/rss+xml" title="Performance RSS 2.0"        href="/rss/feeds/performance.xml" />

<link rel="alternate" type="application/rss+xml" title="Power Management RSS 2.0"        href="/rss/feeds/powermanagement.xml" />

<link rel="alternate" type="application/rss+xml" title="Privacy and Rights RSS 2.0"        href="/rss/feeds/privacyandrights.xml" />

<link rel="alternate" type="application/rss+xml" title="Processors RSS 2.0"        href="/rss/feeds/processors.xml" />

<link rel="alternate" type="application/rss+xml" title="Programming Languages RSS 2.0"        href="/rss/feeds/programminglanguages.xml" />

<link rel="alternate" type="application/rss+xml" title="Purpose-built Systems RSS 2.0"        href="/rss/feeds/purpose-builtsystems.xml" />

<link rel="alternate" type="application/rss+xml" title="Quality Assurance RSS 2.0"        href="/rss/feeds/qualityassurance.xml" />

<link rel="alternate" type="application/rss+xml" title="RFID RSS 2.0"        href="/rss/feeds/rfid.xml" />

<link rel="alternate" type="application/rss+xml" title="SIP RSS 2.0"        href="/rss/feeds/sip.xml" />

<link rel="alternate" type="application/rss+xml" title="Search Engines RSS 2.0"        href="/rss/feeds/searchengines.xml" />

<link rel="alternate" type="application/rss+xml" title="Security RSS 2.0"        href="/rss/feeds/security.xml" />

<link rel="alternate" type="application/rss+xml" title="Semi-structured Data RSS 2.0"        href="/rss/feeds/semi-structureddata.xml" />

<link rel="alternate" type="application/rss+xml" title="Social Computing RSS 2.0"        href="/rss/feeds/socialcomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="System Administration RSS 2.0"        href="/rss/feeds/systemadministration.xml" />

<link rel="alternate" type="application/rss+xml" title="System Evolution RSS 2.0"        href="/rss/feeds/systemevolution.xml" />

<link rel="alternate" type="application/rss+xml" title="Testing RSS 2.0"        href="/rss/feeds/testing.xml" />

<link rel="alternate" type="application/rss+xml" title="Virtual Machines RSS 2.0"        href="/rss/feeds/virtualmachines.xml" />

<link rel="alternate" type="application/rss+xml" title="Virtualization RSS 2.0"        href="/rss/feeds/virtualization.xml" />

<link rel="alternate" type="application/rss+xml" title="Visualization RSS 2.0"        href="/rss/feeds/visualization.xml" />

<link rel="alternate" type="application/rss+xml" title="VoIP RSS 2.0"        href="/rss/feeds/voip.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Development RSS 2.0"        href="/rss/feeds/webdevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Security RSS 2.0"        href="/rss/feeds/websecurity.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Services RSS 2.0"        href="/rss/feeds/webservices.xml" />

<link rel="alternate" type="application/rss+xml" title="Workflow Systems RSS 2.0"        href="/rss/feeds/workflowsystems.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6562869-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

<script type="text/javascript">
function plusone_vote( obj ) {
_gaq.push(['_trackEvent','plusone',obj.state]);
}
</script>



<style>
body {
	font-family: jaf-bernino-sans, 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Geneva, Verdana, sans-serif;
	color: #333;
	max-width: 100%;
}
div.container p {
	line-height: 1.65em;
}
h1 {
	font-size: 32px;
}
h3 {
	font-size: 18px;
}
h4 {
	font-size: 14px;
}

div.container {
	margin-left: auto;
	margin-right: auto;
}

div {
	margin: 64px;
//	max-width: 800px;
	position: relative;
}

@media only screen and (min-width: 1024px) {
	div {
		max-width: 800px;
	}
}

img {
    max-width: 100%;
    height: auto;
    width: auto\9; /* ie8 */
}
a {
	color: #009;
	text-decoration: none;
}
a:hover {
	text-decoration: underline;
}
hr {
	margin:64px;
}
label {
	font-size: 0.8em;
	color: #666;
}
input {
	color: #999;
}

/* NAVBAR */
.navbar {
//	position: fixed;
	background: #EEEEEE;
	top: -64px;
	z-index: 10000;
	width: 100%;
	clear: both;
	padding: 0px;
	margin: 0px;
	padding-top: 10px;
	padding-left: 10px;
	padding-right: 10px;
}

/*  SECTIONS  */
.section {
	clear: both;
	padding: 0px;
	margin: 0px;
}

/*  COLUMN SETUP  */
.col {
	display: block;
	float:left;
	margin: 1% 0 1% 1.6%;
}
.col:first-child { margin-left: 0; }


/*  GROUPING  */
.group:before,
.group:after {
	content:"";
	display:table;
}
.group:after {
	clear:both;
}
.group {
    zoom:1; /* For IE 6/7 */
}

/*  GRID OF THREE  */
.span_3_of_3 {
	width: 100%;
}
.span_2_of_3 {
	width: 66.1%;
}
.span_1_of_3 {
	width: 32.2%;
}

/*  GO FULL WIDTH AT LESS THAN 480 PIXELS */

@media only screen and (max-width: 480px) {
	.col {
		margin: 1% 0 1% 0%;
	}
}

@media only screen and (max-width: 480px) {
	.span_3_of_3 {
		width: 100%;
	}
	.span_2_of_3 {
		width: 100%;
	}
	.span_1_of_3 {
		width: 100%;
	}
}

.span_2_of_2 {
	width: 100%;
}

.span_1_of_2 {
	width: 49.2%;
}

/*  GO FULL WIDTH AT LESS THAN 480 PIXELS */

@media only screen and (max-width: 480px) {
	.span_2_of_2 {
		width: 100%;
	}
	.span_1_of_2 {
		width: 100%;
	}
}
</style>


<style>
body {
	font-size: 19px;
}
#form-search > .st-default-search-input {
	width: 170px;
  display: inline-block;
  height: 16px;
  padding: 7px 11px 7px 28px;
  border: 1px solid #bbb;
  border: 1px solid rgba(0,0,0,0.25);
  font-weight: 400;
  color: #3B454F;
  font-size: 14px;
  line-height: 16px;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  font-family: system, -apple-system, BlinkMacSystemFont, "Helvetica Neue", "Lucida Grande", sans-serif;
}


blockquote
{
    color: #666;
    font-size: 1.1em;
    background: none;
    border-left: .2rem solid #d3d3d3;

    display: block;
    padding: 20px 20px 10px 45px;
    margin: 20px 0;
    font-style: italic;

    margin-block-start: 1em;
    margin-block-end: 1em;
    margin-inline-start: 40px;
    margin-inline-end: 40px;

	font-family: Georgia, Palatino, "Palatino Linotype", Times, "Times New Roman", serif;
}

.ldq {
	display: block;
    padding-left: 10px;
    content: "\201C";
    font-size: 60px;
    position: relative;
    left: -50px;
    top: 0;
    height: 0;
    color: #7a7a7a;
}
code {
//	font-size:1.25em;
}
a {overflow-wrap: break-word;}
</style>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<body>
<!-- Google Tag Manager (noscript)
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P52H78L"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
 End Google Tag Manager (noscript) -->



<div class=container>
	<div class="navbar">
		<form id="form-search" name="searchform" onsubmit="return false;" style='float:right;'>
				<input type="text" class="st-default-search-input">
<script type="text/javascript">
  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){
  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);
  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');

  _st('install','UyYECD1kdsPnbHJtPyzG','2.0.0');
</script>
				<br />
			
			<a href="issuedetail.cfm?issue=3695735" style='width:150px;font-size:0.7em;'>Current Issue</a> &nbsp; <a href="pastissues.cfm" style='width:150px;font-size:0.7em;'>Past Issues</a> &nbsp; <a href="topics.cfm" style='width:150px;font-size:0.7em;'>Topics</a>
			
		</form>
		<a href='/'><img src='https://queue.acm.org/img/acmqueue_logo.gif' /></a>

	</div>

<!--
<p style='text-align:center;'>
<a href='/app/' target='_new'><img src='/app/2021_03-04_lrg.png' with=90 height=120 style='float:right;width:90px;height:120px;' alt='March/April 2021 issue of acmqueue' /></a>
<b><a href='/app/'>The March/April 2021 issue of acmqueue is out now</a></b>
<br />
<br />
<a href='https://cdn.coverstand.com/3rd_pty/acm/login.html?&btx_i=705849'>Subscribers and ACM Professional members login here</a>
<br clear=all />
<hr style='display:block;color:red;margin:5px;' />
</p>
-->
<br />



<label>September 16, 2024<br /><b><a class="descriptor" href="issuedetail.cfm?issue=3695735">Volume 22, issue 4 </a></b></label>


<p>
<!-- // Check for existence of associated MP3 file-->

 &nbsp;
	
			<a href="https://portal.acm.org/citation.cfm?id=3690759">
				<img src="img/icon_pdf.png" alt="Download PDF version of this article" />
				PDF
			</a>
		
</p>


 
  <h1 class="hidetitle">Questioning the Criteria for Evaluating Non-cryptographic Hash Functions</h1> 
  <h2>Maybe we need to think more about non-cryptographic hash functions.</h2> 
  <h3>Catherine Hayes and David Malone</h3> 
  <p>Computing practitioners encounter hash functions almost every day, although they may not necessarily be the center of attention. When you install software packages or updates, the authenticity of a package is often verified with a cryptographic hash. Indeed, under the hood, everyone who browses the web these days is using cryptographic hashes to check that the certificates used by web servers are in order.</p> 
  <p>Non-cryptographic hash functions are also all around us. Those who write code often use dictionaries, which are usually implemented with hash functions (so much so that Perl calls them <i>hashes</i>). Those who use load balancers are often using hash functions to distribute the load. There are even smart algorithms for counting and deduplication of data that take advantage of non-cryptographic hashes for efficiency.</p> 
  <p>The common feature of both cryptographic and non-cryptographic hash functions is that they take inputs of data of any size and convert it to a deterministic output of specific length. Unlike encryption, this is intended to be a one-way process (i.e., decryption is never required). </p> 
  <p>Cryptographic hashes have a security requirement, which is usually phrased in terms of resistance to <i>collisions</i> and <i>pre-images</i>. Indeed, for a cryptographic hash function, knowing the hash output should give you no clue about how to reconstruct the input data. In theory, you could achieve this by assigning a random output for every input and storing them in a huge table. In practice, however, clever designs for hash functions have emerged that involve bit operations, lookup tables, and repeated rounds to mix the input data.</p> 
  <p>In the case of non-cryptographic hash functions, security is not the primary requirement. Usually, you would like a hash function to map input data (e.g., typically strings/IP addresses/objects) in a reasonable way across some resource (e.g., linked lists, servers, or data structures). Often, <i>reasonable</i> means uniformly distributed outputs, or at least as close to uniform as can be achieved relatively quickly. </p> 
  <p>This desired uniformity can come under attack, giving rise to security requirements in the non-cryptographic setting; as pointed out by Scott Crosby and Dan Wallach,<sup>6</sup> an attacker might try to mess things up by presenting inputs that all get assigned to the same resource. Simpler functions, however, are often used for the sake of speed, at least when compared with the more demanding design goals of the cryptographic hash. These non-cryptographic hash functions are the focus of this article.</p> 
  <h3>Some Examples</h3> 
  <p>Over the years, many hash functions have been proposed,<sup>16</sup> but let's look at some well-known simple examples listed in table 1.</p> 
  <img src="https://dl.acm.org/cms/attachment/html/10.1145/3690759/assets/html/malone-t1.png" alt="Questioning the Criteria for Evaluating Non-cryptographic Hash Functions" /> 
  <p>You can assess the behavior of a (non-cryptographic) hash function by putting it to work to see how it performs. One common use is in populating hash tables. In this case, we use modulo arithmetic to assign the inputs to one of <i>M</i> "buckets" by taking the hash of the input, <i>h</i>, and using <i>h</i> mod <i>M</i> to identify the bucket. How does the desired uniform-looking output compare with the actual results? To find out, let's pick a few example input sets (see table 2) and run some code. We have selected items that you would expect to populate a hash table (names, words, IP addresses) as well as something that might be troublesome (bit strings that differ from a fixed string in only one bit). This is called the <i>Bias</i> dataset.</p> 
  <img src="https://dl.acm.org/cms/attachment/html/10.1145/3690759/assets/html/malone-t2.png" alt="Questioning the Criteria for Evaluating Non-cryptographic Hash Functions" /> 
  <p> You would assume the main goal is to ensure the table is filled as evenly as possible. Indeed, for a hash table implemented with a list at each bucket, it is easy enough to show that a uniform output is optimal, as this avoids long chains of data being stored in any one bucket, while avoiding unused buckets. Let's see how uniformly the hash output is distributed modulo <i>M</i>.</p> 
  <p> As each of these datasets comprises 1,000 lines of input, using <i>M</i> = 500 buckets would therefore result in a <i>load factor</i> of two. This means ideally, there would be two entries per bucket and no empty buckets. To get a feel for what happens in practice, you can see in figure 1 the number of empty buckets observed for each case: about 64 empty buckets except for the Bias data, which leaves many buckets empty for three of the four hashes, and must, consequently, be crowding other buckets with data. Murmur2 is resistant to this problem; we will come back to this.</p> 
  <img src="https://dl.acm.org/cms/attachment/html/10.1145/3690759/assets/html/malone1.png" alt="Questioning the Criteria for Evaluating Non-cryptographic Hash Functions" /> 
  <p>There are various ways to measure how far from uniform the distribution over the buckets is. For example, you might take a statistical approach and use a chi-squared test. In figure 2 you can see the <i>p-value</i> from the test. If each output value was really independently and uniformly distributed over the <i>M</i> buckets, then these p-values would be uniformly distributed between 0 and 1. On the other hand, repeated values close to 0 would be suspicious, which is again the case for the Bias data. This time, there is a cluster of small values for DJBX33A, a function that can be shown to preserve bit patterns in the input data. The Murmur2 values, curiously, are also lower than expected.</p> 
  <img src="https://dl.acm.org/cms/attachment/html/10.1145/3690759/assets/html/malone2.png" alt="Questioning the Criteria for Evaluating Non-cryptographic Hash Functions" /> 
  <p>Interestingly, while bad behavior is evident in the Bias dataset, there are more values close to 1 for the <i>IP Addresses</i> set. Further investigation shows that the IP addresses contain several runs of sequential addresses that behave particularly nicely for some of the hashes. This shows that sometimes there may be gains to matching your hash function to patterns that are common in your data.</p> 
  <p>Taking a step back, you can, to some degree, play a game of pick-your-metric, and it might be reasonable to do so based on the requirements of your application. You can also play pick-your-<i>M</i>-value. For comparison, figure 3 shows the incidence of empty buckets after picking the nearby numbers, <i>M</i> = 499 and <i>M</i> = 512. There is folklore around hash tables suggesting that an <i>M</i> that is prime or a power of two may be good. The original choice of <i>M</i> = 500 and the power of two <i>M</i> = 512 have similar behavior. This is because the structure of the Bias dataset results in recurring patterns in the low bits, which are preserved by working modulo numbers divisible by a power of two. A prime <i>M</i>, such as 499, will mitigate this sort of problem, as, in fact, will any odd values of <i>M</i>.</p> 
  <img src="https://dl.acm.org/cms/attachment/html/10.1145/3690759/assets/html/malone3.png" alt="Questioning the Criteria for Evaluating Non-cryptographic Hash Functions" /> 
  <p> To explore this, we tried all numbers of buckets <i>M</i> between 488 and 522, using the Bias dataset again and combining it with FNV-1a (see figure 4, prime numbers highlighted in red).</p> 
  <img src="https://dl.acm.org/cms/attachment/html/10.1145/3690759/assets/html/malone4.png" alt="Questioning the Criteria for Evaluating Non-cryptographic Hash Functions" /> 
  <p>The number of empty buckets (blue line, axis on right-hand side) bounces quite regularly between about 60 and 270. In general, when the number of buckets is an even number, only even-numbered buckets are filled, meaning that half are left empty. Likewise, any even bucket number resulted in a zero p-value (orange line in figure 4). While odd-numbered buckets also saw a consistent number of empty buckets, p-values showed a more varied pattern. Interestingly, p-values are largest at 507 or 513 buckets, which are odd but not prime. So much for folklore.</p> 
  <p>So, it would appear that when using the more "real life" datasets (i.e., excluding Bias), the number of empty buckets and distributions are broadly similar for the first three hashes, both FNVs and Murmur2. It also seems you can hide some problems by using an odd value of <i>M</i>, although not necessarily a prime. You can also look at other metrics, such as the number of buckets with collisions, and the story stays the same.</p> 
  <p>&nbsp;</p> 
  <h3>The Avalanche Criterion</h3> 
  <p>This leads to the question, Is there some general principle that could be used to design a non-cryptographic hash function? One commonly adopted measure is the <i>avalanche criterion</i>. To understand this, think back to the theoretical example of designing a hash function by listing every input and storing a corresponding randomly generated <i>N</i>-bit output. If you selected any two inputs, then the outputs would be independent of one another. In fact, each bit of the output would be set independently, meaning there would be a 50/50 chance of a flip when comparing each bit of the two outputs.</p> 
  <p>The avalanche criterion tests for this and is usually stated as, <i> If you change one bit in your input, this change affects every bit of the output with a probability of 50 percent</i>.<sup>12</sup> For small input sizes, hash designers can test for every possible input, but for larger sizes, inputs are often randomly sampled.</p> 
  <p>Figure 5 shows how the avalanche metric is typically evaluated. For each hash function, we have followed the work of Bret Mulvey<sup>12</sup> and chosen random 32-bit inputs and then toggled each input bit to observe the chance of each of the 32 output bits changing over 10,000 tests. The results are shown in an output matrix, colored as follows:</p> 
  <img src="https://dl.acm.org/cms/attachment/html/10.1145/3690759/assets/html/malone5.png" alt="Questioning the Criteria for Evaluating Non-cryptographic Hash Functions" /> 
  <p>• <span style="color:#007F3A">Green</span> <span style="font-family:&quot;Cambria Math&quot;,serif">⇒</span> toggling input bit <i>i</i> resulted in a change to output bit <i>j</i> approximately 50 percent of the time (45–55 percent). This is the ideal.</p> 
  <p>• <span style="color:#E57F00">Yellow</span> <span style="font-family:&quot;Cambria Math&quot;,serif">⇒</span> a chance of change either 25–45 percent or 55–75 percent.</p> 
  <p>• <span style="color:#CB0000">Red</span> <span style="font-family:&quot;Cambria Math&quot;,serif">⇒</span> the effect of toggling input bit <i>i</i> was a change to output bit <i>j</i> either 0–25 percent or 75–100 percent of the time. This is the worst-case scenario.</p> 
  <p>Murmur2 shows an impressive avalanche performance, with all entries in green. Indeed, Murmur2 was designed with the avalanche criterion in mind. Murmur2's structure in table 1 shows that it reads in four bytes of data at a time, which then goes through a thorough mixing step on just the current input before being combined with the previous inputs in a way that is like FNV. This mixing step essentially hides simple bit changes within a more random-looking change. Murmur2 also uses a "finalization step" to mix the output bits before producing the final hash output.</p> 
  <p>In contrast, the FNV hashes involve only two simple steps per byte of data (XOR and multiplication by prime), and DBJX33A is even simpler: taking in each byte of data, multiplying by 33, and adding to the previous value. For FNV, this results in some patterns from the input bytes being preserved in the output bytes. For example, the distinctive sawtooth pattern observed in the lower output bits of both FNV-1a and FNV-1 is because no output bit lower than the toggled input bit will ever change. </p> 
  <p>This is a result of the distribution of 1-bits in the FNV prime, which also causes the large swaths of red across the top of both FNV matrices: These represent the most recently processed byte, where changes to it have not had a chance to dissipate into all the bits. For DJBX33A, multiplying by 33, or <code>0b00100001</code>, is equivalent to shifting five places to the left and then adding the original byte. Therefore, a lot of information about the input is preserved mod 32, and it requires many runs through the algorithm to propagate changes to the higher output bits. These issues can be clearly observed in figure 5.</p> 
  <p>Note that although Murmur2 shows much better behavior in terms of the avalanche criterion, its collision resistance and distribution performance on these datasets was not so exceptional, except for the Bias dataset. That dataset was constructed to have many single-bit input differences, which is exactly the type of change targeted by the avalanche criterion. It is possible to produce a challenging dataset for Murmur2 by applying the inverse of its input-mixing step to the Bias dataset. This is a general lesson—every hash function has a dataset that it will find challenging, if the data is selected carefully enough.</p> 
  <p>Avalanche is an interesting criterion, but it targets a specific form of input differences, where single-bit changes are important. Given that this doesn't seem so common in real data, let's take a quick trip through history to understand how the avalanche criterion became interesting for designers.</p> 
  <p>&nbsp;</p> 
  <h3>Some History</h3> 
  <p>Some early references to something like the avalanche criterion come up when discussing S-boxes (substitution boxes) in the DES (Data Encryption Standard) cipher. One strategy, when attacking a cipher, can be to make small changes to the input and then attempt to learn about the key. Here, avalanche is described as ensuring that changing a single bit of the input will change at least two bits in the S-box output,<sup>10</sup> which in turn leads to an avalanche of changed bits as the internal rounds of the DES cipher are repeated. In <i>Applied Cryptography</i>, when analyzing the DES system, Bruce Schneier describes the cryptographic benefit of this: </p> 
  <blockquote>
   By allowing one bit to affect two substitutions, the dependency of the output bits on the input bits spreads faster. This is called an avalanche effect. DES is designed to reach the condition of having every bit of the ciphertext depend on every bit of the plaintext and every bit of the key as quickly as possible.<sup>13</sup>
  </blockquote> 
  <p>These original uses of avalanche are clearly in a cryptographic context and might reasonably be applied to cryptographic hashes, where similar security requirements are present. The question now is, How has avalanche migrated from a cryptographic background into the non-cryptographic world? We looked at a number of papers to see where references to avalanche as a criterion for non-cryptographic hashes may have originated and progressed through the literature.</p> 
  <p>For example, in their paper, "Novel non-cryptographic hash functions for networking and security applications on FPGA," Claesen, et al., state, "Non-cryptographic hashes for applications such as Bloom filters, hash tables, and sketches must be fast, uniformly distributed and must have excellent avalanche properties."<sup>4</sup> Two papers are cited in support of this (Bloom<sup>3</sup> and Cormode and Muthukrishnan<sup>5</sup>), but neither one directly mentions avalanche.</p> 
  <p>Similarly, in "Performance of the most common non-cryptographic hash functions, " Estébanez, et al., mention that the avalanche effect is important for non-cryptographic hash functions, providing several references.<sup>7</sup> One is to Valloud's book on assessing hash functions, <i> Hashing in Smalltalk: Theory and Practice</i>, which is actually lukewarm on the avalanche criterion:</p> 
  <blockquote>
   Although the avalanche test is quite popular, note that... it says nothing of the distribution of the actual hash values. In particular, it is quite possible to construct hash functions of horrific quality that nevertheless effortlessly achieve general avalanche.<sup> 16</sup>
  </blockquote> 
  <p>Another common reference is Uzgalis's "Hashing concepts and the Java programming language" from 1996. <sup>15</sup> The author does note that one of the two criteria used to choose a candidate hash for Java was a mixing criterion: "The algorithm must guarantee that a change in any single bit of a key should result in an equally probable change to every bit of the hash value." This is clearly the avalanche criterion, but the author goes on to make a distinction between randomized-looking output and uniformly distributed outputs. Again, avalanche is vital only for those in search of a random result.</p> 
  <p>In fact, in all the applicable papers we identified, the avalanche criterion is either presented as a goal in itself or provides references that either are dead ends or lead to discussions that are guarded about avalanche's universal applicability.<sup>1,8,9</sup> </p> 
  <p>&nbsp;</p> 
  <h3>Repackaging Avalanche</h3> 
  <p>Another challenge that arises with avalanche is that it is really targeting output that is uniform over, say, a 32-bit output. What the application would usually like, however, is an output that is uniform over the <i>M</i> resources. In fact, it is impossible to pack a uniform 32-bit output uniformly into <i>M</i> buckets unless <i>M</i> is a power of two, which brings its own drawbacks, as seen earlier. This problem was recognized some years ago for random-number generators and is described as <i>modulo bias</i>. This resulted in the introduction of functions such as <code>arc4random_uniform()</code>, which use extra random bits to resolve the bias. Work is ongoing to optimize fixes for modulo bias for random numbers.<sup>11</sup> The situation for hash functions is somewhat less developed, probably because the input data itself can always be a source of non-uniformity.</p> 
  <p>&nbsp;</p> 
  <h3>Some Final Thoughts</h3> 
  <p>Although cryptographic and non-cryptographic hash functions are everywhere, there seems to be a gap in how they are designed. Lots of criteria exist for cryptographic hashes motivated by various security requirements, but on the non-cryptographic side there is a certain amount of folklore that, despite the long history of hash functions, has not been fully explored. While targeting a uniform distribution makes a lot of sense for real-world datasets, it can be a challenge when confronted by a dataset with particular patterns. </p> 
  <p>Avalanche may be an important criterion for cryptographic hash functions, but its focus on randomizing the relationship between input and output may not have a big impact on distribution of entries in a hash table. Distributing outputs in a hash table raises the long-debated question of whether to choose your <i>M</i> to be a prime of power of two but does not generally consider the option of simply using an odd number.</p> 
  <p>This evidence all fits with the idea that non-cryptographic hash functions perhaps deserve more attention. Some already think that too much is being asked of individual cryptographic hashes: Maybe a one-size-fits-all approach is not workable.<sup>14</sup> Another approach has been to design hashes targeting a middle ground; these would have some security requirements but maintain the speed and efficiency of a non-cryptographic hash—for example, SipHash.<sup>2</sup> Perhaps studying hashes for a range of specific situations will help clarify how (or if) we should evaluate non-cryptographic hash functions in general.</p> 
  <p>&nbsp;</p> 
  <h4>References</h4> 
  <p>1. Akoto-Adjepong, V., Asante, M., Okyere-Gyamfi, S. 2020. An enhanced non-cryptographic hash function. <i> International Journal of Computer Applications 176</i> (15), 10–17; <a href="https://www.ijcaonline.org/archives/%20volume176/number15/akotoadjepong-2020-ijca-920014.pdf"> https://www.ijcaonline.org/archives/ volume176/number15/akotoadjepong-2020-ijca-920014.pdf</a>.</p> 
  <p>2. Aumasson, J.-P., Bernstein, D. J. 2012. SipHash: a fast short-input PRF. In <i>Progress in Cryptology</i> (IndoCrypt), 489–508. Springer; <a href="https://link.springer.com/chapter/10.1007/978-3-642-34931-7_28"> https://link.springer.com/chapter/10.1007/978-3-642-34931-7_28</a>.</p> 
  <p>3. Bloom, B. H. 1970. Space/time trade-offs in hash coding with allowable errors. <i>Communications of the ACM 13</i> (7), 422–426; <a href="https://dl.acm.org/doi/10.1145/362686.362692">https://dl.acm.org/doi/10.1145/362686.362692</a><a href="https://dl.acm.org/doi/pdf/10.1145/362686.362692">.</a></p> 
  <p>4. Claesen, T., Sateesan, A., Vliegen, J., Mentens, N. 2021. Novel non-cryptographic hash functions for networking and security applications on FPGA. Euromicro Conference on Digital System Design; <a href="https://www.computer.org/csdl/proceedings-article/dsd/2021/270300a347/1xCb7oBYCvS"> https://www.computer.org/csdl/proceedings-article/dsd/2021/270300a347/1xCb7oBYCvS</a>.</p> 
  <p>5. Cormode, G., Muthukrishnan, S. 2005. An improved data stream summary: the count-min sketch and its applications. <i>Journal of Algorithms 55</i> (1), 58–75; <a href="https://dl.acm.org/doi/10.1016/j.jalgor.2003.12.001">https://dl.acm.org/doi/10.1016/j.jalgor.2003.12.001</a>.</p> 
  <p>6. Crosby, S. A., Wallach, D. S. 2003. Denial of service via algorithmic complexity attacks. 12th Usenix Security Symposium; <a href="https://www.usenix.org/legacy/events/sec03/tech/full_papers/crosby/crosby.pdf">https://www.usenix.org/legacy/events/sec03/tech/full_papers/crosby/crosby.pdf</a>.</p> 
  <p>7. Estébanez, C., Saez, Y., Recio, G., Isasi, P. 2014. Performance of the most common non-cryptographic hash functions. <i>Journal of Software: Practice and Experience 44</i> (6), 681–698. John Wiley &amp; Sons; <a href="https://onlinelibrary.wiley.com/doi/10.1002/spe.2179"> https://onlinelibrary.wiley.com/doi/10.1002/spe.2179</a>; <a href="https://e-archivo.uc3m.es/rest/api/core/bitstreams/c2735ec2-8ae9-47f1-b663-dcda0c4f6204/content">https://e-archivo.uc3m.es/rest/api/core/bitstreams/c2735ec2-8ae9-47f1-b663-dcda0c4f6204/content</a>.</p> 
  <p>8. Estébanez, C., Saez, Y., Recio, G., Isasi, P. Automatic design of noncryptographic hash functions using genetic programming; <a href="https://e-archivo.uc3m.es/rest/api/core/bitstreams/d0cd6f8f-6554-45b8-9f06-2f0ac8e7df11/content"> https://e-archivo.uc3m.es/bitstream/handle/10016/30762/automatic_CI_2014_ps.pdf</a>.</p> 
  <p>9. Henke, C., Schmoll, C., Zseby, T. Empirical evaluation of hash functions for multipoint measurements. <i> ACM SIGCOMM Computer Communication Review 38</i> (3), 39–50; <a href="https://dl.acm.org/doi/10.1145/1384609.1384614">https://dl.acm.org/doi/10.1145/1384609.1384614</a>.</p> 
  <p>10. Katz, J., Lindell, Y. 2014. Substitution permutation networks (chapter 6.2.1). In <i> Introduction to Modern Cryptography</i>. CRC Press.</p> 
  <p>11. Lemire, D. 2019. Fast random integer generation in an interval. <i> ACM Transactions on Modeling and Computer Simulation 29</i> (1), 1–12; <a href="https://dl.acm.org/doi/10.1145/3230636">https://dl.acm.org/doi/10.1145/3230636</a>.</p> 
  <p>12. Mulvey, B. The Pluto Scarab; <a href="https://web.archive.org/web/20230603152138/%20https:/papa.bretmulvey.com/post/124027987928/hash-functions">https://web.archive.org/web/20230603152138/https://papa.bretmulvey.com/post/124027987928/hash-functions</a>.</p> 
  <p>13. Schneier, B. 1996. Description of DES (chapter 12.2). In <i> Applied Cryptography: Protocols, Algorithms, and Source Code in C</i>, second edition. John Wiley and Sons, Inc.</p> 
  <p>14. Noll, L. C. Too many demands for a single cryptographic hash function to satisfy; <a href="http://www.isthe.com/chongo/tech/comp/crypto-hash.html"> http://www.isthe.com/chongo/tech/comp/crypto-hash.html.</a></p> 
  <p>15. Uzgalis, R. 1996. Hashing concepts and the Java programming language; <a href="http://www.serve.net/buz/hash.adt/java.000.html"> http://www.serve.net/buz/hash.adt/java.000.html</a>.</p> 
  <p>16. Valloud, A. 2008. <i> Hashing in Smalltalk: Theory and Practice</i>. Self-published, <a href="https://www.lulu.com/shop/andres-valloud/hashing-in-smalltalk-theory-and-practice/paperback/product-1wywv2r.html?page=1&amp;pageSize=4">lulu.com.</a></p> 
  <p>&nbsp;</p> 
  <p><b>Catherine Hayes</b> obtained her mathematics degree from Maynooth University in 2004 and has worked in financial portfolio management for the 20 years since. When the lure of mathematics became too strong, she returned to Maynooth University to complete an MSc, supervised by David Malone, and was introduced to the fascinating world of hash functions.</p> 
  <p><b>David Malone</b> is a researcher, sysadmin, or professor, depending on when you talk to him. He has worked on FreeBSD, IPv6, guessing passwords, and even warcycling around Dublin. He did his degrees in mathematics at Trinity College Dublin and works at Maynooth University.</p> 
  <p>Copyright © 2024 held by owner/author. Publication rights licensed to ACM.</p>  
 <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8ddecdfe2eaa20c0',t:'MTczMDgzMDI2OS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script> 

	<p>
	
		<img class="floatLeft" src="img/q stamp_small.jpg" width="26" height="45" alt="acmqueue"><br><br>
	
	<em>Originally published in Queue vol. 22, no. 4</em>&#8212;
 	<br>
	Comment on this article in the <a href="http://portal.acm.org/citation.cfm?id=3690759">ACM Digital Library</a>
	
	</p>
	



<br />
<!--
<a href="https://twitter.com/share" class="twitter-share-button" data-via="ACMQueue">Tweet</a>
-->
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>

<br />

<!--
<fb:like></fb:like>
-->

<br />

<div class="g-plusone" data-size="small" data-annotation="inline" data-width="120"></div>

<!-- these get hooked up to js events -->
<script type="text/javascript">
	addthis_pub             = 'acm';
	addthis_logo            = 'http://queue.acm.org/img/logo_queue_small.gif';
	addthis_logo_background = '#ffffff';
	addthis_logo_color      = '000000';
	addthis_brand           = 'ACM Queue';
	addthis_options         = 'reddit, slashdot, facebook, favorites, email, delicious, digg, technorati, blinklist, furl, myspace, google, live, more';
</script>

<!-- FB Like -->
<!--
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<div id="fb-root"></div>
-->

<!-- Place this tag after the last +1 button tag. -->

<!--
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>

<br />
<script src="https://connect.facebook.net/en_US/all.js#xfbml=1"></script>

<script>
FB.Event.subscribe('edge.create', function(targetUrl) {
  _gaq.push(['_trackSocial', 'facebook', 'like', targetUrl]);
});
</script>
-->



<hr noshade size=1 />




More related articles:

	  <p>
	  <span>Nicole Forsgren, Eirini Kalliamvakou, Abi Noda, Michaela Greiler, Brian Houck, Margaret-Anne Storey</span> - <a href="detail.cfm?id=3639443"><b>DevEx in Action</b></a>
	  <br />
	  DevEx (developer experience) is garnering increased attention at many software organizations as leaders seek to optimize software delivery amid the backdrop of fiscal tightening and transformational technologies such as AI. Intuitively, there is acceptance among technical leaders that good developer experience enables more effective software delivery and developer happiness. Yet, at many organizations, proposed initiatives and investments to improve DevEx struggle to get buy-in as business stakeholders question the value proposition of improvements.
	  </p>
	  <br />

	  <p>
	  <span>Jo&#227;o Varaj&#227;o, Ant&#243;nio Trigo, Miguel Almeida</span> - <a href="detail.cfm?id=3631183"><b>Low-code Development Productivity</b></a>
	  <br />
	  This article aims to provide new insights on the subject by presenting the results of laboratory experiments carried out with code-based, low-code, and extreme low-code technologies to study differences in productivity. Low-code technologies have clearly shown higher levels of productivity, providing strong arguments for low-code to dominate the software development mainstream in the short/medium term. The article reports the procedure and protocols, results, limitations, and opportunities for future research.
	  </p>
	  <br />

	  <p>
	  <span>Ivar Jacobson, Alistair Cockburn</span> - <a href="detail.cfm?id=3631182"><b>Use Cases are Essential</b></a>
	  <br />
	  While the software industry is a fast-paced and exciting world in which new tools, technologies, and techniques are constantly being developed to serve business and society, it is also forgetful. In its haste for fast-forward motion, it is subject to the whims of fashion and can forget or ignore proven solutions to some of the eternal problems that it faces. Use cases, first introduced in 1986 and popularized later, are one of those proven solutions.
	  </p>
	  <br />

	  <p>
	  <span>Jorge A. Navas, Ashish Gehani</span> - <a href="detail.cfm?id=3570922"><b>OCCAM-v2: Combining Static and Dynamic Analysis for Effective and Efficient Whole-program Specialization</b></a>
	  <br />
	  OCCAM-v2 leverages scalable pointer analysis, value analysis, and dynamic analysis to create an effective and efficient tool for specializing LLVM bitcode. The extent of the code-size reduction achieved depends on the specific deployment configuration. Each application that is to be specialized is accompanied by a manifest that specifies concrete arguments that are known a priori, as well as a count of residual arguments that will be provided at runtime. The best case for partial evaluation occurs when the arguments are completely concretely specified. OCCAM-v2 uses a pointer analysis to devirtualize calls, allowing it to eliminate the entire body of functions that are not reachable by any direct calls.
	  </p>
	  <br />


<hr noshade size=1 />





<hr noshade size=1 />

	<p>
	<a href='#'><img src='https://queue.acm.org/img/logo_acm.gif' /></a>
	<br />
	&copy; ACM, Inc. All Rights Reserved.
	</p>

</div>



</body>
</html>